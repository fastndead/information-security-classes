Функция compose получает в качестве аргументов функции и возвращает одну функцию. В этой реализации оператор распространения использован для пре- вращения этих функций-аргументов в массив по имени fns. Затем возвращается функция, ожидающая один аргумент, arg. Когда вызывается эта функция, массив fns выстраивается в конвейер, начинающийся с аргумента, который нужно про- пустить через функции. Аргумент становится исходным значением для composed, а затем при каждой итерации возвращается урезанная функция обратного вызова. Обратите внимание на то, что функция обратного вызова получает два аргумента: composed и функцию f. Каждая функция вызывается с аргументом composed, явля- ющимся результатом, полученным на выходе предыдущей функции. В конечном итоге будет вызвана последняя функция и возвращен последний результат.
Этот простой пример функции-композиции разработан для демонстрации техно- логии составления композиции. Когда приходится обрабатывать более одного ар- гумента или иметь дело с аргументами, не являющимися функциями, эта функция усложняется. В других реализациях композиции1 может использоваться функция reduceRight, которая будет составлять функции в обратном порядке.
А теперь все вместе
После введения в основные концепции функционального программирования най- дем им практическое применение и создадим небольшое JavaScript-приложение.
Поскольку JavaScript позволяет отступать от функциональной парадигмы, не обя- зывая следовать правилам, вам нужно будет сосредоточиться. Соблюдение трех простых правил поможет не сбиваться с курса.
1. Сохраняйте неизменяемость данных.
2. Сохраняйте чистоту функций, пусть они получают как минимум один аргумент и возвращают данные или другую функцию.
3. Используйте рекурсию вместо циклов (везде, где только возможно).
Наша задача — создать тикающие часы. Они должны отображать часы, минуты, секунды и время суток в обычном гражданском формате. У каждого поля всегда должна быть пара цифр, то есть перед одиночной цифрой, 1 или 2, должен быть на- чальный ноль. Часы также должны тикать и изменять отображение каждую секунду.
Сначала рассмотрим императивное решение этой задачи.
// Вывод показаний часов каждую секунду
setInterval(logClockTime, 1000);
function logClockTime() {